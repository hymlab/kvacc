"""
Load and filter various pMHC-I binding datasets, optionally including eluted peptides identified by mass-spec.
"""

import numpy as np
import pandas as pd
import unittest
import logging.config
from collections import namedtuple
from mhcnc import MHCAlleleName
from commons import StrUtils, SeqUtils, BindLevel

# Logger
logger = logging.getLogger('nplm')

IC50_THRESHOLD = 500

def load_badata_kim2014(fn='data/bdata.20130222.mhci.txt'):
    df = pd.read_table(fn, names=['species', 'allele', 'pep_len', 'pep_seq', 'meas_inequality', 'meas_value'],
                       na_values=['None'], header=0)
    logger.info('Loaded kim2014 binding data from %s: %s' % (fn, str(df.shape)))
    logger.debug('Dropping NA')
    df = df.dropna()
    logger.debug('Current df.shape: %s' % str(df.shape))

    logger.debug('Dropping species column')
    df = df.drop(['species'], axis=1)
    logger.debug('Current df.shape: %s' % str(df.shape))

    df['original_allele'] = df['allele'].copy()
    df['meas_method'] = 'BA'
    df['assay_type'] = 'ic50'
    df['meas_units'] = 'nM'
    df['pubmed_id'] = '25017736'
    df['journal'] = 'BMC Bioinformatics'
    df['authors'] = 'Kim, Y.'
    df['pub_date'] = '2014'
    df['title'] = ' Dataset size and composition impact the reliability of performance benchmarks for peptide-MHC binding predictions'
    df['bind_level'] = df.meas_value.map(lambda x: BindLevel.POSITIVE if x < IC50_THRESHOLD else BindLevel.NEGATIVE)
    df['binder'] = df.meas_value.map(lambda x: x < IC50_THRESHOLD)

    # Convert to the standard allele names{Robinson:2014ca}
    df.allele = df.allele.map(MHCAlleleName.std_name)

    logger.debug("Dropping alleles with ambiguous names")
    df = df[df['allele'].map(MHCAlleleName.is_valid)]
    logger.debug('Current df.shape: %s' % str(df.shape))

    # Select valid peptide sequences
    logger.debug('Selecting valid peptide sequences')
    df = df[
        df['pep_seq'].map(lambda x: SeqUtils.is_valid_aaseq(x))
        # df['pep_seq'].str.match("^[ACDEFGHIKLMNPQRSTVWY]+$")
    ]

    # Set indices to combined string allele and pep_seq and drop duplicated entries
    df.index = list(map(lambda x, y: '%s_%s' % (x, y), df.allele, df.pep_seq))

    logger.debug('Dropping duplicated entries by allele and pep_seq')
    df = df[~df.index.duplicated(keep='first')]
    logger.debug('Current df.shape: %s' % str(df.shape))

    # Selecting peptides of length 8-15
    logger.debug('Selecting peptides of length 8-15')
    df = df[
        (df.pep_len >= 8) & (df.pep_len <= 15)
    ]

    # Dropping alleles with fewer than 25 entries
    logger.debug('Dropping alleles with fewer than 25 entries')
    grouped = df.groupby(['allele'])
    df = grouped.filter(lambda x: x.shape[0] > 25)
    logger.debug('Current df.shape: %s' % str(df.shape))

    df = df.loc[:, ['original_allele', 'allele', 'pep_seq',
                    'pep_len', 'meas_value', 'meas_method',
                    'assay_type', 'meas_units', 'meas_inequality',
                    'bind_level', 'binder', 'pubmed_id', 'journal',
                    'authors', 'pub_date', 'title']]

    logger.info(df.head().to_string())
    logger.info('Final kim2014 dataset, df.shape: %s' % str(df.shape))
    return df


BIND_LEVELS = ['NEGATIVE', 'POSITIVE-LOW', 'POSITIVE-INTERMEDIATE', 'POSITIVE', 'POSITIVE-HIGH']

def to_bind_level(s):
    return BindLevel(BIND_LEVELS.index(s.upper()))

def load_data_iedb(fn='data/mhc_ligand_full.csv', select=None):
    df = pd.read_csv(fn, skiprows=1, low_memory=False)
    logger.info("Loaded iedb data from %s: %s" % (fn, str(df.shape)))
    logger.debug("Selecting only class I")
    df = df[
        df["MHC allele class"].str.strip().str.upper() == "I"
    ]
    logger.debug('Current df.shape: %s' % str(df.shape))

    logger.debug('Converting to standard allele name')
    df['original_allele'] = df["Allele Name"]
    df['allele'] = df["Allele Name"].map(MHCAlleleName.std_name)
    logger.debug('Current df.shape: %s' % str(df.shape))

    logger.debug("Dropping mutant alleles")
    df = df[
        (~df["allele"].str.contains("mutant")) &
        (~df["allele"].str.contains("CD1"))
    ]
    logger.debug('Current df.shape: %s' % str(df.shape))

    # invalid_alleles = np.unique(iedb_df.allele[~iedb_df['allele'].map(MHCAlleleName.is_valid)])
    # print('Invalid allele names:', invalid_alleles)
    logger.debug("Dropping alleles with ambiguous names")
    df = df[df['allele'].map(MHCAlleleName.is_valid)]
    logger.debug('Current df.shape: %s' % str(df.shape))

    # Select valid peptide sequences
    logger.debug('Selecting valid peptide sequences')
    df["pep_seq"] = df['Description'].str.strip()
    df = df[
        df['pep_seq'].map(lambda x: SeqUtils.is_valid_aaseq(x))
        # df['pep_seq'].str.match("^[ACDEFGHIKLMNPQRSTVWY]+$")
    ]
    df['pep_len'] = df['pep_seq'].map(lambda x: len(x))
    logger.debug('Current df.shape: %s' % str(df.shape))

    # Set indices to combined string allele and pep_seq and drop duplicated entries
    df.index = list(map(lambda x, y: '%s_%s' % (x, y), df.allele, df.pep_seq))

    logger.debug('Dropping duplicated entries by allele and pep_seq')
    df = df[~df.index.duplicated(keep='first')]
    logger.debug('Current df.shape: %s' % str(df.shape))

    # Selecting peptides of length 8-15
    logger.debug('Selecting peptides of length 8-15')
    df = df[
        (df.pep_len >= 8) & (df.pep_len <= 15)
    ]

    # Dropping alleles with fewer than 25 entries
    logger.debug('Dropping alleles with fewer than 25 entries')
    grouped = df.groupby(['allele'])
    df = grouped.filter(lambda x: x.shape[0] > 25)
    logger.debug('Current df.shape: %s' % str(df.shape))

    if select is not None:
        logger.debug('Selecting %s ligands' % select)
        if select.upper() == 'BA':
            df = df[
                ~df["Method/Technique"].str.contains("mass spec")
            ]
        elif select.upper() == 'MS':
            df = df[
                df["Method/Technique"].str.contains("mass spec")
            ]
        else:
            raise ValueError('Unknown select flag: %s' % select)
        logger.debug('Current df.shape: %s' % str(df.shape))

    # Measurement labels and values
    df['meas_value'] = df['Quantitative measurement']
    df['meas_method'] = df['Method/Technique']
    df['assay_type'] = df['Assay Group']
    df['meas_units'] = df['Units']
    df['meas_inequality'] = df['Measurement Inequality']
    df['bind_level'] = df['Qualitative Measure'].map(to_bind_level)

    # Annotating reference
    logger.debug("Annotating references")
    df['pubmed_id'] = df['PubMed ID']
    df['journal'] = df['Journal']
    df['authors'] = df['Authors']
    df['pub_date'] = df['Date']
    df['title'] = df['Title']

    df = df.loc[:, ['original_allele', 'allele', 'pep_seq',
                    'pep_len', 'meas_value', 'meas_method',
                    'assay_type', 'meas_units', 'meas_inequality',
                    'bind_level', 'pubmed_id', 'journal',
                    'authors', 'pub_date', 'title']]

    logger.debug('Measurement count per allele: %s' % df.allele.value_counts())
    logger.debug('Measurement count per pep_len: %s' % df.pep_len.value_counts())
    logger.debug('Measurement count per bind_level: %s' % df.bind_level.value_counts())
    logger.info(df.head().to_string())
    logger.info('Final IEDB %s dataset, df.shape: %s' % (StrUtils.default_str(select, 'ALL'), str(df.shape)))
    return df

def load_pretrain_data(source_ideb='data/mhc_ligand_full.csv',
                       source_kim2014='data/bdata.20130222.mhci.txt', include_ms=False):
    df_kim2014 = load_badata_kim2014(fn=source_kim2014)
    logger.debug(df_kim2014.head().to_string())
    logger.info('Loaded Kim2014 BA data: %s' % str(df_kim2014.shape))
    iedb_select = None if include_ms else 'BA'
    df_iedb = load_data_iedb(fn=source_ideb, select=iedb_select)
    logger.debug(df_iedb.head().to_string())
    logger.info('Loaded IEDB %s data: %s' % (StrUtils.default_str(iedb_select, 'ALL'), str(df_iedb.shape)))

    logger.debug('Combining two datasets')
    if not np.array_equal(df_kim2014.columns, df_iedb.columns):
        raise ValueError('Not equal columns of two datasets: %s, %s' % (df_kim2014.columns, df_iedb.columns))

    df = pd.concat([df_iedb, df_kim2014])
    logger.debug('Current df.shape: %s' % str(df.shape))

    logger.debug('Removing duplicated indicies')
    df = df[~df.index.duplicated(keep='first')]
    logger.info(df.head().to_string())
    logger.info('Final combined df.shape: %s' % str(df.shape))
    return df

import warnings

class LoadDataTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        logger.setLevel(logging.DEBUG)
        warnings.filterwarnings("ignore")

    def setUp(self):
        self.expected_columns = ['original_allele', 'allele', 'pep_seq',
                                 'pep_len', 'meas_value', 'meas_method',
                                 'assay_type', 'meas_inequality', 'bind_level',
                                 'pubmed_id', 'authors']
        self.fn_kim2014 = 'data/bdata.20130222.mhci.sample.txt'
        self.fn_iedb = 'data/mhc_ligand_full.sample.csv'

    def is_valid_index(self, index):
        tokens = index.split('_')
        allele = tokens[0]
        pep_seq = tokens[1]

        return MHCAlleleName.is_valid(allele) and SeqUtils.is_valid_aaseq(pep_seq)

    def test_to_bind_level(self):
        self.assertEqual(BindLevel.POSITIVE_HIGH, to_bind_level('Positive-High'))
        self.assertEqual(BindLevel.POSITIVE, to_bind_level('Positive'))
        self.assertEqual(BindLevel.POSITIVE_INTERMEDIATE, to_bind_level('Positive-Intermediate'))
        self.assertEqual(BindLevel.POSITIVE_LOW, to_bind_level('Positive-Low'))
        self.assertEqual(BindLevel.NEGATIVE, to_bind_level('Negative'))

    def test_load_data_kim2014(self):
        df = load_badata_kim2014(fn=self.fn_kim2014)
        self.assertTrue(np.array_equal(self.expected_columns, df.columns))
        self.assertTrue(df.shape[0] > 0 and df.shape[1] > 0)
        self.assertTrue(all(df.index.map(lambda x: self.is_valid_index(x))))

    def test_load_data_iedb(self):
        df = load_data_iedb(fn=self.fn_iedb)
        self.assertTrue(np.array_equal(self.expected_columns, df.columns))
        self.assertTrue(df.shape[0] > 0 and df.shape[1] > 0)
        self.assertTrue(all(df.index.map(lambda x: self.is_valid_index(x))))

    def test_load_data_iedb_by_select(self):
        df_all = load_data_iedb(fn=self.fn_iedb)
        df_ba = load_data_iedb(fn=self.fn_iedb, select='ba')
        df_ms = load_data_iedb(fn=self.fn_iedb, select='ms')

        self.assertEqual(df_all.shape[0], df_ba.shape[0] + df_ms.shape[0])
        self.assertTrue(all(~df_ba.meas_method.str.contains('mass spec')))
        self.assertTrue(all(df_ms.meas_method.str.contains('mass spec')))

    def test_load_pretrain_data(self):
        df = load_pretrain_data(source_ideb=self.fn_iedb, source_kim2014=self.fn_kim2014, include_ms=False)
        self.assertTrue(np.array_equal(self.expected_columns, df.columns))
        self.assertTrue(df.shape[0] > 0 and df.shape[1] > 0)
        self.assertTrue(all(df.index.map(lambda x: self.is_valid_index(x))))
        self.assertTrue(all(~df.index.duplicated(keep='first')))
        self.assertTrue(all(~df.meas_method.str.contains('mass spec')))

        df = load_pretrain_data(source_ideb=self.fn_iedb, source_kim2014=self.fn_kim2014, include_ms=True)
        self.assertTrue(np.array_equal(self.expected_columns, df.columns))
        self.assertTrue(df.shape[0] > 0 and df.shape[1] > 0)
        self.assertTrue(all(df.index.map(lambda x: self.is_valid_index(x))))
        self.assertTrue(all(~df.index.duplicated(keep='first')))
        self.assertTrue(any(df.meas_method.str.contains('mass spec')))

def parse(cls, name):
    gm = cls.gene_map()

    species = cls.species(name)
    if species is None:
        raise ValueError('Unknown species: %s' % name)

    pattern = None
    genes_c1 = cls.classI_genes(species)
    genes_c2 = cls.classII_genes(species)
    all_genes = '|'.join(genes_c1 + genes_c2)

    gene = group = protein = None
    if species == 'H2':  # The allele name pattern for mouse is different from the others
        pattern = '(?P<species>%s)-(?P<gene>%s)(?P<protein>b|d|k|q|wm7)' % (species, all_genes)
        found = re.search(pattern, name)
        if found is None:
            raise ValueError('Invalid allele name:', name)

        gene = found.group('gene')
        protein = found.group('protein')
    else:
        #             pattern = '(?P<species>%s)?-?(?P<gene>%s)\*?(?P<group>\w+)?:?(?P<protein>[0-9]+)?.*' % (species, '|'.join(all_genes))
        # pattern = '(?P<species>%s)?-?(?P<gene>\\b%s\\b)\*?(?P<group>\w+)?:?(?P<protein>[0-9]+)?.*' % (species,
        #
        #                                                                                               '\\b|\\b'.join(all_genes))
        pattern = '(?P<species>%s)-(?P<gene>%s)\*?(?P<group>[\w]{1,3})?$' % (species, all_genes)
        found = re.search(pattern, name)
        if found is not None:  # Ends with group name
            gene = found.group('gene')
            group = found.group('group')
        else:
            pattern = '(?P<species>%s)-(?P<gene>%s)\*(?P<group>[\w]{1,3}):(?P<protein>[0-9]{2})' % (species, all_genes)
            found = re.search(pattern, name)
            if found is None:
                raise ValueError('Invalid allele name:', name)

            gene = found.group('gene')
            group = found.group('group')
            protein = found.group('protein')

    return MHCAlleleName(species=species,
                         clazz=MHCClass.I if gene in genes_c1 else MHCClass.II,
                         gene=gene,
                         group=group,
                         protein=protein)


if __name__ == '__main__':
    unittest.main()
